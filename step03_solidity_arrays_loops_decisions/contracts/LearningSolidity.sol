// SPDX-License-Identifier: MIT
pragma solidity ^0.8.6;

contract LearningSolidity {
  uint[] public myArray;

  // Getter function generated by the compiler
    /*
    function myArray(uint i) public view returns (uint) {
        return myArray[i];
    }
    */

  constructor() {
    myArray = [1, 2, 3];
    myArray.push(4);
  }

  function sum() public view returns(uint){
    uint result = 0;
    for (uint256 index = 0; index < myArray.length; index++) {
      if(index != 0) {
        result += myArray[index];
      }
    }
    return result;
  }

  function testArray() public pure returns(bool){
      uint len = 7; 
      
      //dynamic array
      uint[] memory a = new uint[](7);
      
      //bytes is same as byte[]
      bytes memory b = new bytes(len);
      
      assert(a.length == 7);
      assert(b.length == len);
      
      //access array variable
      a[6] = 8;
      
      //test array variable
      assert(a[6] == 8);
      
      //static array
      uint[3] memory c = [uint(1) , 2, 3];
      assert(c.length == 3);

      return true;
   }

}


