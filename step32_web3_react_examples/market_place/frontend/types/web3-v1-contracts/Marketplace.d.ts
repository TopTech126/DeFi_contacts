/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type ProductCreated = ContractEventLog<{
  id: string;
  name: string;
  price: string;
  owner: string;
  purchased: boolean;
  0: string;
  1: string;
  2: string;
  3: string;
  4: boolean;
}>;
export type ProductPurchased = ContractEventLog<{
  id: string;
  name: string;
  price: string;
  owner: string;
  purchased: boolean;
  0: string;
  1: string;
  2: string;
  3: string;
  4: boolean;
}>;

export interface Marketplace extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): Marketplace;
  clone(): Marketplace;
  methods: {
    name(): NonPayableTransactionObject<string>;

    productCount(): NonPayableTransactionObject<string>;

    products(arg0: number | string | BN): NonPayableTransactionObject<{
      id: string;
      name: string;
      price: string;
      owner: string;
      purchased: boolean;
      0: string;
      1: string;
      2: string;
      3: string;
      4: boolean;
    }>;

    createProduct(
      _name: string,
      _price: number | string | BN
    ): NonPayableTransactionObject<void>;

    purchaseProduct(_id: number | string | BN): PayableTransactionObject<void>;
  };
  events: {
    ProductCreated(cb?: Callback<ProductCreated>): EventEmitter;
    ProductCreated(
      options?: EventOptions,
      cb?: Callback<ProductCreated>
    ): EventEmitter;

    ProductPurchased(cb?: Callback<ProductPurchased>): EventEmitter;
    ProductPurchased(
      options?: EventOptions,
      cb?: Callback<ProductPurchased>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "ProductCreated", cb: Callback<ProductCreated>): void;
  once(
    event: "ProductCreated",
    options: EventOptions,
    cb: Callback<ProductCreated>
  ): void;

  once(event: "ProductPurchased", cb: Callback<ProductPurchased>): void;
  once(
    event: "ProductPurchased",
    options: EventOptions,
    cb: Callback<ProductPurchased>
  ): void;
}
